{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"fastapi-serverless-cookiecutter \u00b6 If you are viewing this on GitHub, I recommend you check out the hosted docs instead as not everything here is in standard Markdown. Warning While this cookiecutter is functional as-is, the documentation for this project is far from complete . For generating FastAPI projects to be hosted on AWS Lambda using the Serverless framework. Includes everything that Triax uses for its internal projects like: CI/CD with CircleCI Private PyPI repos (e.g. on Gemfury ) Generation of Angular client libraries using OpenAPI Generator A bunch of security best-practices Usage \u00b6 Install cookiecutter . I recommend installing with pipx like pipx install cookiecutter . Run this cookiecutter with cookiecutter gh:triaxtec/fastapi-serverless-cookiecutter Fill in the variables ! Warning Running a cookiecutter executes arbitrary Python code . Only run cookiecutters than you trust! Variables \u00b6 When you run this cookiecutter, you will be prompted to provide all of these values: package_name \u00b6 The name of the Python-installable package and top level directory that will be generated. By convention, this should be in kebab-case where each word is separated by a \"-\". module_name \u00b6 The name of the module where all your Python source code will go. This one should be snake_case where each word is separated by an underscore. The default is the same as package_name but in snake_case. pypi_url \u00b6 The URL to your private PyPI repository. If you aren't using one, you can leave this at the default. You'll have to remove the relevant pieces of pyproject.toml and CircleCI Config . npm_url \u00b6 The URL to your private NPM repository. If you aren't using one, you can leave this at the default. You'll have to remove the relevant pieces of Angular Client Config and CircleCI Config . Now what? \u00b6 Explore the generated example in GitHub or generate your own and start playing! See Next Steps for setting up CircleCI, AWS, etc. to work with it. Check out What You Get for a walkthrough of everything that will be generated by this cookiecutter.","title":"Intro"},{"location":"#fastapi-serverless-cookiecutter","text":"If you are viewing this on GitHub, I recommend you check out the hosted docs instead as not everything here is in standard Markdown. Warning While this cookiecutter is functional as-is, the documentation for this project is far from complete . For generating FastAPI projects to be hosted on AWS Lambda using the Serverless framework. Includes everything that Triax uses for its internal projects like: CI/CD with CircleCI Private PyPI repos (e.g. on Gemfury ) Generation of Angular client libraries using OpenAPI Generator A bunch of security best-practices","title":"fastapi-serverless-cookiecutter"},{"location":"#usage","text":"Install cookiecutter . I recommend installing with pipx like pipx install cookiecutter . Run this cookiecutter with cookiecutter gh:triaxtec/fastapi-serverless-cookiecutter Fill in the variables ! Warning Running a cookiecutter executes arbitrary Python code . Only run cookiecutters than you trust!","title":"Usage"},{"location":"#variables","text":"When you run this cookiecutter, you will be prompted to provide all of these values:","title":"Variables"},{"location":"#package_name","text":"The name of the Python-installable package and top level directory that will be generated. By convention, this should be in kebab-case where each word is separated by a \"-\".","title":"package_name"},{"location":"#module_name","text":"The name of the module where all your Python source code will go. This one should be snake_case where each word is separated by an underscore. The default is the same as package_name but in snake_case.","title":"module_name"},{"location":"#pypi_url","text":"The URL to your private PyPI repository. If you aren't using one, you can leave this at the default. You'll have to remove the relevant pieces of pyproject.toml and CircleCI Config .","title":"pypi_url"},{"location":"#npm_url","text":"The URL to your private NPM repository. If you aren't using one, you can leave this at the default. You'll have to remove the relevant pieces of Angular Client Config and CircleCI Config .","title":"npm_url"},{"location":"#now-what","text":"Explore the generated example in GitHub or generate your own and start playing! See Next Steps for setting up CircleCI, AWS, etc. to work with it. Check out What You Get for a walkthrough of everything that will be generated by this cookiecutter.","title":"Now what?"},{"location":"hyperlinks/","text":"","title":"Hyperlinks"},{"location":"next_steps/","text":"Next Steps \u00b6 So you've generated yourself a new project with this cookiecutter... what now? Well the first thing you need to handle is your private repository settings. If you're using private repositories: \u00b6 Set your credentials in Poetry if you haven't done so previously using the following two commands, substituting your own URL and credentials: poetry config repositories.private https://pypi.fury.io/my-org/ poetry config http-basic.private \"$GEMFURY_PULL_TOKEN\" \"$GEMFURY_PULL_TOKEN\" If you are not using private repositories \u00b6 Remove anything that references private repositories in: pyproject.toml CircleCI Config Angular Client Config Now that that's done- it's time to install some dependencies! Go to your freshly generated directory and run poetry install to install both regular and dev dependencies. Now hop into a poetry shell so you can run other commands without prefixing them with poetry run . Run the project locally \u00b6 Let's make sure everything is hunky dory and see what it is you've generated. Run MySQL \u00b6 This project generator assumes you'll be using MySQL with SQLAlchemy for your database. If that's not the case, you've got some tweaking to do. If you are using that setup, you need to be running a MySQL database locally in order to run tests or the services themselves. There are a million ways to run MySQL so I'll leave it up to you to decide how you're going to do that. Once you've got it running, create two databases. The first should be called \"testing\" (used by unit tests). The second should be named the same as your project. Check out the generated sample-config.yml to see what exactly it's expecting. Run the checks \u00b6 Now that your testing database exists, you should be able to run task check and see everything pass. It's possible isort and black will have a bit of work to do as formatting templates is tricky. Set some config values \u00b6 Before you can run this thing for real, you have to create a config.yml in the root of the project. [flex-config] requires some source to set the database credentials, and the easiest way to do that locally is via YAML. So copy sample-config.yml to config.yml and adjust values as needed. Run the thing! \u00b6 To run your API locally now, do uvicorn <module_name>.main:app . You should be able to go to http://localhost:8000/docs to see your fresh new API. You can also check out the one included endpoint at http://localhost:8000/changelog","title":"Next Steps"},{"location":"next_steps/#next-steps","text":"So you've generated yourself a new project with this cookiecutter... what now? Well the first thing you need to handle is your private repository settings.","title":"Next Steps"},{"location":"next_steps/#if-youre-using-private-repositories","text":"Set your credentials in Poetry if you haven't done so previously using the following two commands, substituting your own URL and credentials: poetry config repositories.private https://pypi.fury.io/my-org/ poetry config http-basic.private \"$GEMFURY_PULL_TOKEN\" \"$GEMFURY_PULL_TOKEN\"","title":"If you're using private repositories:"},{"location":"next_steps/#if-you-are-not-using-private-repositories","text":"Remove anything that references private repositories in: pyproject.toml CircleCI Config Angular Client Config Now that that's done- it's time to install some dependencies! Go to your freshly generated directory and run poetry install to install both regular and dev dependencies. Now hop into a poetry shell so you can run other commands without prefixing them with poetry run .","title":"If you are not using private repositories"},{"location":"next_steps/#run-the-project-locally","text":"Let's make sure everything is hunky dory and see what it is you've generated.","title":"Run the project locally"},{"location":"next_steps/#run-mysql","text":"This project generator assumes you'll be using MySQL with SQLAlchemy for your database. If that's not the case, you've got some tweaking to do. If you are using that setup, you need to be running a MySQL database locally in order to run tests or the services themselves. There are a million ways to run MySQL so I'll leave it up to you to decide how you're going to do that. Once you've got it running, create two databases. The first should be called \"testing\" (used by unit tests). The second should be named the same as your project. Check out the generated sample-config.yml to see what exactly it's expecting.","title":"Run MySQL"},{"location":"next_steps/#run-the-checks","text":"Now that your testing database exists, you should be able to run task check and see everything pass. It's possible isort and black will have a bit of work to do as formatting templates is tricky.","title":"Run the checks"},{"location":"next_steps/#set-some-config-values","text":"Before you can run this thing for real, you have to create a config.yml in the root of the project. [flex-config] requires some source to set the database credentials, and the easiest way to do that locally is via YAML. So copy sample-config.yml to config.yml and adjust values as needed.","title":"Set some config values"},{"location":"next_steps/#run-the-thing","text":"To run your API locally now, do uvicorn <module_name>.main:app . You should be able to go to http://localhost:8000/docs to see your fresh new API. You can also check out the one included endpoint at http://localhost:8000/changelog","title":"Run the thing!"},{"location":"what_you_get/pyproject/","text":"pyproject.toml \u00b6 The single source of metadata for your project, as defined by PEP-518. This contains configuration for several tools used in building & testing your app. Poetry \u00b6 Used to manage dependencies, and virtual environments. It can also be used to build/publish packages, but you likely won't be needing those features for this project. Private PyPI Repository \u00b6 Configure a private PyPI repo that you can install dependencies from. Dependencies \u00b6 The Python packages your project will use at runtime Dev Dependencies \u00b6 The Python packages only you and CI use, not packaged with a release CLI Entrypoint \u00b6 An entrypoint to a CLI named the same thing as the module_name variable for calling the Typer CLI defined in cli.py . taskipy \u00b6 A tool for easily running commands in the context of our Poetry environment. black \u00b6 Automatically reformats your code. isort \u00b6 Organizes your Python imports. coverage \u00b6 Configure Coverage .","title":"What You Get - pyproject.toml"},{"location":"what_you_get/pyproject/#pyprojecttoml","text":"The single source of metadata for your project, as defined by PEP-518. This contains configuration for several tools used in building & testing your app.","title":"pyproject.toml"},{"location":"what_you_get/pyproject/#poetry","text":"Used to manage dependencies, and virtual environments. It can also be used to build/publish packages, but you likely won't be needing those features for this project.","title":"Poetry"},{"location":"what_you_get/pyproject/#private-pypi-repository","text":"Configure a private PyPI repo that you can install dependencies from.","title":"Private PyPI Repository"},{"location":"what_you_get/pyproject/#dependencies","text":"The Python packages your project will use at runtime","title":"Dependencies"},{"location":"what_you_get/pyproject/#dev-dependencies","text":"The Python packages only you and CI use, not packaged with a release","title":"Dev Dependencies"},{"location":"what_you_get/pyproject/#cli-entrypoint","text":"An entrypoint to a CLI named the same thing as the module_name variable for calling the Typer CLI defined in cli.py .","title":"CLI Entrypoint"},{"location":"what_you_get/pyproject/#taskipy","text":"A tool for easily running commands in the context of our Poetry environment.","title":"taskipy"},{"location":"what_you_get/pyproject/#black","text":"Automatically reformats your code.","title":"black"},{"location":"what_you_get/pyproject/#isort","text":"Organizes your Python imports.","title":"isort"},{"location":"what_you_get/pyproject/#coverage","text":"Configure Coverage .","title":"coverage"},{"location":"what_you_get/top_level/","text":"Warning You do not need to read everything in this section. In fact, you might want to skip it entirely and come back if you have questions about any specific file that was generated. This section will outline everything generated by this project along with reasoning behind a lot of the choices. This section is intended more as a reference than anything else, read the stuff you're curious about, skip everything else. A fully generated example (the same example included inline here) can be found in the \"example\" directory in the GitHub repo. Top Level \u00b6 Whatever you provided for the package_name variable will be created as a directory. Inside will be a fully fledged Python package containing a FastAPI app and everything you need to deploy it to AWS Lambda using the Serverless framework. In this top level directory you'll get all of the following: README.md \u00b6 Describes how to build and deploy this freshly generated package. Also contains a link back to these docs for easy reference. pyproject.toml \u00b6 The single source of metadata for your project, as defined by PEP-518 . This contains configuration for several tools used in building & testing your app.","title":"Top Level"},{"location":"what_you_get/top_level/#top-level","text":"Whatever you provided for the package_name variable will be created as a directory. Inside will be a fully fledged Python package containing a FastAPI app and everything you need to deploy it to AWS Lambda using the Serverless framework. In this top level directory you'll get all of the following:","title":"Top Level"},{"location":"what_you_get/top_level/#readmemd","text":"Describes how to build and deploy this freshly generated package. Also contains a link back to these docs for easy reference.","title":"README.md"},{"location":"what_you_get/top_level/#pyprojecttoml","text":"The single source of metadata for your project, as defined by PEP-518 . This contains configuration for several tools used in building & testing your app.","title":"pyproject.toml"},{"location":"what_you_get/pyproject/black/","text":"Black \u00b6 Reformats your code. The small amount you can configure it can be done in the [tool.black] section highlighted below. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 [tool.poetry] name = \"example\" version = \"0.1.0\" description = \"A Fast API\" authors = [] # You can put your name/email here if you like readme = \"README.md\" packages = [ { include = \"example\" }, ] classifiers = [ \"Private :: Not For Publishing!\" # Prevents this from being accidentally published to public PyPI ] include = [\"example/CHANGELOG.md\", \"example/rds-ca-2019-root.pem\"] [[tool.poetry.source]] name = \"private\" url = \"https://pypi.fury.io/my-org/\" [tool.poetry.dependencies] python = \"==3.*,>=3.8.0\" fastapi = \">=0.53.0\" mangum = \"^0.8.0\" sqlalchemy = \"^1.3.10\" pymysql = \"^0.9.3\" secure = \"^0.2.1\" flex-config = { version = \"^1.1.0\" , extras = [ \"all\" ]} semantic-version = \"^2.8.4\" markdown = \"^3.1.1\" [tool.poetry.dev-dependencies] uvicorn = \"^0.11.3\" pytest = \"*\" pytest-mock = \"*\" pytest-cov = \"*\" mypy = \"*\" sqlalchemy-stubs = \">=0.3\" safety = \"*\" black = { version = \">=19.10b\" , allow-prereleases = true } taskipy = \"*\" isort = \"*\" typer = \"^0.2.1\" alembic = \"^1.3.2\" [tool.poetry.scripts] example = \"cli:cli\" # For running management CLI in cli.py [tool.taskipy.tasks] migrate = \"alembic revision --autogenerate -m \" upgrade = \"alembic upgrade heads\" downgrade = \"alembic downgrade -1\" upgrade_dev = \"alembic -x env=dev upgrade heads\" downgrade_dev = \"alembic -x env=dev downgrade -1\" upgrade_live = \"alembic -x env=live upgrade heads\" downgrade_live = \"alembic -x env=live downgrade -1\" check = \"safety check && isort --recursive --apply && black . && mypy example && pytest --cov=example\" [tool.black] line-length = 120 target_version = ['py38'] exclude = ''' ( /( | \\.git | \\.venv | \\.mypy_cache )/ ) ''' [tool.isort] line_length = 120 skip = \"migrations,.serverless,.venv,node_modules\" multi_line_output = 3 include_trailing_comma = true [tool.coverage.run] omit = [\"example/__init__.py\"]","title":"Black"},{"location":"what_you_get/pyproject/black/#black","text":"Reformats your code. The small amount you can configure it can be done in the [tool.black] section highlighted below. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 [tool.poetry] name = \"example\" version = \"0.1.0\" description = \"A Fast API\" authors = [] # You can put your name/email here if you like readme = \"README.md\" packages = [ { include = \"example\" }, ] classifiers = [ \"Private :: Not For Publishing!\" # Prevents this from being accidentally published to public PyPI ] include = [\"example/CHANGELOG.md\", \"example/rds-ca-2019-root.pem\"] [[tool.poetry.source]] name = \"private\" url = \"https://pypi.fury.io/my-org/\" [tool.poetry.dependencies] python = \"==3.*,>=3.8.0\" fastapi = \">=0.53.0\" mangum = \"^0.8.0\" sqlalchemy = \"^1.3.10\" pymysql = \"^0.9.3\" secure = \"^0.2.1\" flex-config = { version = \"^1.1.0\" , extras = [ \"all\" ]} semantic-version = \"^2.8.4\" markdown = \"^3.1.1\" [tool.poetry.dev-dependencies] uvicorn = \"^0.11.3\" pytest = \"*\" pytest-mock = \"*\" pytest-cov = \"*\" mypy = \"*\" sqlalchemy-stubs = \">=0.3\" safety = \"*\" black = { version = \">=19.10b\" , allow-prereleases = true } taskipy = \"*\" isort = \"*\" typer = \"^0.2.1\" alembic = \"^1.3.2\" [tool.poetry.scripts] example = \"cli:cli\" # For running management CLI in cli.py [tool.taskipy.tasks] migrate = \"alembic revision --autogenerate -m \" upgrade = \"alembic upgrade heads\" downgrade = \"alembic downgrade -1\" upgrade_dev = \"alembic -x env=dev upgrade heads\" downgrade_dev = \"alembic -x env=dev downgrade -1\" upgrade_live = \"alembic -x env=live upgrade heads\" downgrade_live = \"alembic -x env=live downgrade -1\" check = \"safety check && isort --recursive --apply && black . && mypy example && pytest --cov=example\" [tool.black] line-length = 120 target_version = ['py38'] exclude = ''' ( /( | \\.git | \\.venv | \\.mypy_cache )/ ) ''' [tool.isort] line_length = 120 skip = \"migrations,.serverless,.venv,node_modules\" multi_line_output = 3 include_trailing_comma = true [tool.coverage.run] omit = [\"example/__init__.py\"]","title":"Black"},{"location":"what_you_get/pyproject/cli/","text":"CLI Entrypoint \u00b6 The [tool.poetry.scripts] section (highlighted below) allows you to create entrypoints into your package. In this case we define an entrypoint to the Typer CLI declared in cli.py . This means with a package called \"example\" we can do poetry run example to access that Typer CLI. In the case of the generated CLI, this enables us to run poetry run example openapi in order to generate an openapi.json file to be used for Client Generation in CI. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 [tool.poetry] name = \"example\" version = \"0.1.0\" description = \"A Fast API\" authors = [] # You can put your name/email here if you like readme = \"README.md\" packages = [ { include = \"example\" }, ] classifiers = [ \"Private :: Not For Publishing!\" # Prevents this from being accidentally published to public PyPI ] include = [\"example/CHANGELOG.md\", \"example/rds-ca-2019-root.pem\"] [[tool.poetry.source]] name = \"private\" url = \"https://pypi.fury.io/my-org/\" [tool.poetry.dependencies] python = \"==3.*,>=3.8.0\" fastapi = \">=0.53.0\" mangum = \"^0.8.0\" sqlalchemy = \"^1.3.10\" pymysql = \"^0.9.3\" secure = \"^0.2.1\" flex-config = { version = \"^1.1.0\" , extras = [ \"all\" ]} semantic-version = \"^2.8.4\" markdown = \"^3.1.1\" [tool.poetry.dev-dependencies] uvicorn = \"^0.11.3\" pytest = \"*\" pytest-mock = \"*\" pytest-cov = \"*\" mypy = \"*\" sqlalchemy-stubs = \">=0.3\" safety = \"*\" black = { version = \">=19.10b\" , allow-prereleases = true } taskipy = \"*\" isort = \"*\" typer = \"^0.2.1\" alembic = \"^1.3.2\" [tool.poetry.scripts] example = \"cli:cli\" # For running management CLI in cli.py [tool.taskipy.tasks] migrate = \"alembic revision --autogenerate -m \" upgrade = \"alembic upgrade heads\" downgrade = \"alembic downgrade -1\" upgrade_dev = \"alembic -x env=dev upgrade heads\" downgrade_dev = \"alembic -x env=dev downgrade -1\" upgrade_live = \"alembic -x env=live upgrade heads\" downgrade_live = \"alembic -x env=live downgrade -1\" check = \"safety check && isort --recursive --apply && black . && mypy example && pytest --cov=example\" [tool.black] line-length = 120 target_version = ['py38'] exclude = ''' ( /( | \\.git | \\.venv | \\.mypy_cache )/ ) ''' [tool.isort] line_length = 120 skip = \"migrations,.serverless,.venv,node_modules\" multi_line_output = 3 include_trailing_comma = true [tool.coverage.run] omit = [\"example/__init__.py\"]","title":"CLI Entrypoint"},{"location":"what_you_get/pyproject/cli/#cli-entrypoint","text":"The [tool.poetry.scripts] section (highlighted below) allows you to create entrypoints into your package. In this case we define an entrypoint to the Typer CLI declared in cli.py . This means with a package called \"example\" we can do poetry run example to access that Typer CLI. In the case of the generated CLI, this enables us to run poetry run example openapi in order to generate an openapi.json file to be used for Client Generation in CI. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 [tool.poetry] name = \"example\" version = \"0.1.0\" description = \"A Fast API\" authors = [] # You can put your name/email here if you like readme = \"README.md\" packages = [ { include = \"example\" }, ] classifiers = [ \"Private :: Not For Publishing!\" # Prevents this from being accidentally published to public PyPI ] include = [\"example/CHANGELOG.md\", \"example/rds-ca-2019-root.pem\"] [[tool.poetry.source]] name = \"private\" url = \"https://pypi.fury.io/my-org/\" [tool.poetry.dependencies] python = \"==3.*,>=3.8.0\" fastapi = \">=0.53.0\" mangum = \"^0.8.0\" sqlalchemy = \"^1.3.10\" pymysql = \"^0.9.3\" secure = \"^0.2.1\" flex-config = { version = \"^1.1.0\" , extras = [ \"all\" ]} semantic-version = \"^2.8.4\" markdown = \"^3.1.1\" [tool.poetry.dev-dependencies] uvicorn = \"^0.11.3\" pytest = \"*\" pytest-mock = \"*\" pytest-cov = \"*\" mypy = \"*\" sqlalchemy-stubs = \">=0.3\" safety = \"*\" black = { version = \">=19.10b\" , allow-prereleases = true } taskipy = \"*\" isort = \"*\" typer = \"^0.2.1\" alembic = \"^1.3.2\" [tool.poetry.scripts] example = \"cli:cli\" # For running management CLI in cli.py [tool.taskipy.tasks] migrate = \"alembic revision --autogenerate -m \" upgrade = \"alembic upgrade heads\" downgrade = \"alembic downgrade -1\" upgrade_dev = \"alembic -x env=dev upgrade heads\" downgrade_dev = \"alembic -x env=dev downgrade -1\" upgrade_live = \"alembic -x env=live upgrade heads\" downgrade_live = \"alembic -x env=live downgrade -1\" check = \"safety check && isort --recursive --apply && black . && mypy example && pytest --cov=example\" [tool.black] line-length = 120 target_version = ['py38'] exclude = ''' ( /( | \\.git | \\.venv | \\.mypy_cache )/ ) ''' [tool.isort] line_length = 120 skip = \"migrations,.serverless,.venv,node_modules\" multi_line_output = 3 include_trailing_comma = true [tool.coverage.run] omit = [\"example/__init__.py\"]","title":"CLI Entrypoint"},{"location":"what_you_get/pyproject/coverage/","text":"Coverage \u00b6 Skip things that you cannot cover with unit tests in the [tool.coverage.run] (highlighted below). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 [tool.poetry] name = \"example\" version = \"0.1.0\" description = \"A Fast API\" authors = [] # You can put your name/email here if you like readme = \"README.md\" packages = [ { include = \"example\" }, ] classifiers = [ \"Private :: Not For Publishing!\" # Prevents this from being accidentally published to public PyPI ] include = [\"example/CHANGELOG.md\", \"example/rds-ca-2019-root.pem\"] [[tool.poetry.source]] name = \"private\" url = \"https://pypi.fury.io/my-org/\" [tool.poetry.dependencies] python = \"==3.*,>=3.8.0\" fastapi = \">=0.53.0\" mangum = \"^0.8.0\" sqlalchemy = \"^1.3.10\" pymysql = \"^0.9.3\" secure = \"^0.2.1\" flex-config = { version = \"^1.1.0\" , extras = [ \"all\" ]} semantic-version = \"^2.8.4\" markdown = \"^3.1.1\" [tool.poetry.dev-dependencies] uvicorn = \"^0.11.3\" pytest = \"*\" pytest-mock = \"*\" pytest-cov = \"*\" mypy = \"*\" sqlalchemy-stubs = \">=0.3\" safety = \"*\" black = { version = \">=19.10b\" , allow-prereleases = true } taskipy = \"*\" isort = \"*\" typer = \"^0.2.1\" alembic = \"^1.3.2\" [tool.poetry.scripts] example = \"cli:cli\" # For running management CLI in cli.py [tool.taskipy.tasks] migrate = \"alembic revision --autogenerate -m \" upgrade = \"alembic upgrade heads\" downgrade = \"alembic downgrade -1\" upgrade_dev = \"alembic -x env=dev upgrade heads\" downgrade_dev = \"alembic -x env=dev downgrade -1\" upgrade_live = \"alembic -x env=live upgrade heads\" downgrade_live = \"alembic -x env=live downgrade -1\" check = \"safety check && isort --recursive --apply && black . && mypy example && pytest --cov=example\" [tool.black] line-length = 120 target_version = ['py38'] exclude = ''' ( /( | \\.git | \\.venv | \\.mypy_cache )/ ) ''' [tool.isort] line_length = 120 skip = \"migrations,.serverless,.venv,node_modules\" multi_line_output = 3 include_trailing_comma = true [tool.coverage.run] omit = [\"example/__init__.py\"]","title":"coverage"},{"location":"what_you_get/pyproject/coverage/#coverage","text":"Skip things that you cannot cover with unit tests in the [tool.coverage.run] (highlighted below). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 [tool.poetry] name = \"example\" version = \"0.1.0\" description = \"A Fast API\" authors = [] # You can put your name/email here if you like readme = \"README.md\" packages = [ { include = \"example\" }, ] classifiers = [ \"Private :: Not For Publishing!\" # Prevents this from being accidentally published to public PyPI ] include = [\"example/CHANGELOG.md\", \"example/rds-ca-2019-root.pem\"] [[tool.poetry.source]] name = \"private\" url = \"https://pypi.fury.io/my-org/\" [tool.poetry.dependencies] python = \"==3.*,>=3.8.0\" fastapi = \">=0.53.0\" mangum = \"^0.8.0\" sqlalchemy = \"^1.3.10\" pymysql = \"^0.9.3\" secure = \"^0.2.1\" flex-config = { version = \"^1.1.0\" , extras = [ \"all\" ]} semantic-version = \"^2.8.4\" markdown = \"^3.1.1\" [tool.poetry.dev-dependencies] uvicorn = \"^0.11.3\" pytest = \"*\" pytest-mock = \"*\" pytest-cov = \"*\" mypy = \"*\" sqlalchemy-stubs = \">=0.3\" safety = \"*\" black = { version = \">=19.10b\" , allow-prereleases = true } taskipy = \"*\" isort = \"*\" typer = \"^0.2.1\" alembic = \"^1.3.2\" [tool.poetry.scripts] example = \"cli:cli\" # For running management CLI in cli.py [tool.taskipy.tasks] migrate = \"alembic revision --autogenerate -m \" upgrade = \"alembic upgrade heads\" downgrade = \"alembic downgrade -1\" upgrade_dev = \"alembic -x env=dev upgrade heads\" downgrade_dev = \"alembic -x env=dev downgrade -1\" upgrade_live = \"alembic -x env=live upgrade heads\" downgrade_live = \"alembic -x env=live downgrade -1\" check = \"safety check && isort --recursive --apply && black . && mypy example && pytest --cov=example\" [tool.black] line-length = 120 target_version = ['py38'] exclude = ''' ( /( | \\.git | \\.venv | \\.mypy_cache )/ ) ''' [tool.isort] line_length = 120 skip = \"migrations,.serverless,.venv,node_modules\" multi_line_output = 3 include_trailing_comma = true [tool.coverage.run] omit = [\"example/__init__.py\"]","title":"Coverage"},{"location":"what_you_get/pyproject/dependencies/","text":"Dependencies \u00b6 These are all the packages that this cookiecutter will include for your project to use at runtime. The relevant section in pyproject.toml is highlighted below for reference. fastapi : The basis for your whole project! mangum : The key to getting FastAPI running in Lambda sqlalchemy : An ORM- the best fully-featured ORM we've found. alembic : For managing database migrations with SQLAlchemy pymysql : A MySQL driver for Python- required to hook up SQLAlchemy to MySQL flex-config : A package we developed to make configuring web apps easier. semantic-version : Python does some weird stuff with your project version- we use this to make the published version (in the OpenAPI document) follow standard Semantic Versioning . markdown : For publishing CHANGELOG.md with the API so consumers can know what's going on. secure : For setting some security settings (e.g. HSTS header in responses) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 [tool.poetry] name = \"example\" version = \"0.1.0\" description = \"A Fast API\" authors = [] # You can put your name/email here if you like readme = \"README.md\" packages = [ { include = \"example\" }, ] classifiers = [ \"Private :: Not For Publishing!\" # Prevents this from being accidentally published to public PyPI ] include = [\"example/CHANGELOG.md\", \"example/rds-ca-2019-root.pem\"] [[tool.poetry.source]] name = \"private\" url = \"https://pypi.fury.io/my-org/\" [tool.poetry.dependencies] python = \"==3.*,>=3.8.0\" fastapi = \">=0.53.0\" mangum = \"^0.8.0\" sqlalchemy = \"^1.3.10\" pymysql = \"^0.9.3\" secure = \"^0.2.1\" flex-config = { version = \"^1.1.0\" , extras = [ \"all\" ]} semantic-version = \"^2.8.4\" markdown = \"^3.1.1\" [tool.poetry.dev-dependencies] uvicorn = \"^0.11.3\" pytest = \"*\" pytest-mock = \"*\" pytest-cov = \"*\" mypy = \"*\" sqlalchemy-stubs = \">=0.3\" safety = \"*\" black = { version = \">=19.10b\" , allow-prereleases = true } taskipy = \"*\" isort = \"*\" typer = \"^0.2.1\" alembic = \"^1.3.2\" [tool.poetry.scripts] example = \"cli:cli\" # For running management CLI in cli.py [tool.taskipy.tasks] migrate = \"alembic revision --autogenerate -m \" upgrade = \"alembic upgrade heads\" downgrade = \"alembic downgrade -1\" upgrade_dev = \"alembic -x env=dev upgrade heads\" downgrade_dev = \"alembic -x env=dev downgrade -1\" upgrade_live = \"alembic -x env=live upgrade heads\" downgrade_live = \"alembic -x env=live downgrade -1\" check = \"safety check && isort --recursive --apply && black . && mypy example && pytest --cov=example\" [tool.black] line-length = 120 target_version = ['py38'] exclude = ''' ( /( | \\.git | \\.venv | \\.mypy_cache )/ ) ''' [tool.isort] line_length = 120 skip = \"migrations,.serverless,.venv,node_modules\" multi_line_output = 3 include_trailing_comma = true [tool.coverage.run] omit = [\"example/__init__.py\"]","title":"Dependencies"},{"location":"what_you_get/pyproject/dependencies/#dependencies","text":"These are all the packages that this cookiecutter will include for your project to use at runtime. The relevant section in pyproject.toml is highlighted below for reference. fastapi : The basis for your whole project! mangum : The key to getting FastAPI running in Lambda sqlalchemy : An ORM- the best fully-featured ORM we've found. alembic : For managing database migrations with SQLAlchemy pymysql : A MySQL driver for Python- required to hook up SQLAlchemy to MySQL flex-config : A package we developed to make configuring web apps easier. semantic-version : Python does some weird stuff with your project version- we use this to make the published version (in the OpenAPI document) follow standard Semantic Versioning . markdown : For publishing CHANGELOG.md with the API so consumers can know what's going on. secure : For setting some security settings (e.g. HSTS header in responses) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 [tool.poetry] name = \"example\" version = \"0.1.0\" description = \"A Fast API\" authors = [] # You can put your name/email here if you like readme = \"README.md\" packages = [ { include = \"example\" }, ] classifiers = [ \"Private :: Not For Publishing!\" # Prevents this from being accidentally published to public PyPI ] include = [\"example/CHANGELOG.md\", \"example/rds-ca-2019-root.pem\"] [[tool.poetry.source]] name = \"private\" url = \"https://pypi.fury.io/my-org/\" [tool.poetry.dependencies] python = \"==3.*,>=3.8.0\" fastapi = \">=0.53.0\" mangum = \"^0.8.0\" sqlalchemy = \"^1.3.10\" pymysql = \"^0.9.3\" secure = \"^0.2.1\" flex-config = { version = \"^1.1.0\" , extras = [ \"all\" ]} semantic-version = \"^2.8.4\" markdown = \"^3.1.1\" [tool.poetry.dev-dependencies] uvicorn = \"^0.11.3\" pytest = \"*\" pytest-mock = \"*\" pytest-cov = \"*\" mypy = \"*\" sqlalchemy-stubs = \">=0.3\" safety = \"*\" black = { version = \">=19.10b\" , allow-prereleases = true } taskipy = \"*\" isort = \"*\" typer = \"^0.2.1\" alembic = \"^1.3.2\" [tool.poetry.scripts] example = \"cli:cli\" # For running management CLI in cli.py [tool.taskipy.tasks] migrate = \"alembic revision --autogenerate -m \" upgrade = \"alembic upgrade heads\" downgrade = \"alembic downgrade -1\" upgrade_dev = \"alembic -x env=dev upgrade heads\" downgrade_dev = \"alembic -x env=dev downgrade -1\" upgrade_live = \"alembic -x env=live upgrade heads\" downgrade_live = \"alembic -x env=live downgrade -1\" check = \"safety check && isort --recursive --apply && black . && mypy example && pytest --cov=example\" [tool.black] line-length = 120 target_version = ['py38'] exclude = ''' ( /( | \\.git | \\.venv | \\.mypy_cache )/ ) ''' [tool.isort] line_length = 120 skip = \"migrations,.serverless,.venv,node_modules\" multi_line_output = 3 include_trailing_comma = true [tool.coverage.run] omit = [\"example/__init__.py\"]","title":"Dependencies"},{"location":"what_you_get/pyproject/dev_dependencies/","text":"Dev Dependencies \u00b6 These are all the packages that this cookiecutter will include for your project to use for development and CI. These things will not be included in your packaged Lambda function at runtime. The relevant section in pyproject.toml is highlighted below for reference. uvicorn : Used to run locally for development because running serverless offline is hard and buggy. pytest : A testing framework. mypy : Static type checking. sqlalchemy-stubs : Allows for static type checking of SQLAlchemy models. safety : Check your dependencies for vulnerabilities. black : Auto-formatter for your Python code. taskipy : Define useful shortcuts for running tasks in your Poetry environment. isort : Automatically sort your dependencies. pytest-cov : Easily collect coverage statistics while running pytest. typer : \"The FastAPI of CLIs\" for managing utilities for your app. alembic : Generates and runs database migrations for SQLAlchemy models. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 [tool.poetry] name = \"example\" version = \"0.1.0\" description = \"A Fast API\" authors = [] # You can put your name/email here if you like readme = \"README.md\" packages = [ { include = \"example\" }, ] classifiers = [ \"Private :: Not For Publishing!\" # Prevents this from being accidentally published to public PyPI ] include = [\"example/CHANGELOG.md\", \"example/rds-ca-2019-root.pem\"] [[tool.poetry.source]] name = \"private\" url = \"https://pypi.fury.io/my-org/\" [tool.poetry.dependencies] python = \"==3.*,>=3.8.0\" fastapi = \">=0.53.0\" mangum = \"^0.8.0\" sqlalchemy = \"^1.3.10\" pymysql = \"^0.9.3\" secure = \"^0.2.1\" flex-config = { version = \"^1.1.0\" , extras = [ \"all\" ]} semantic-version = \"^2.8.4\" markdown = \"^3.1.1\" [tool.poetry.dev-dependencies] uvicorn = \"^0.11.3\" pytest = \"*\" pytest-mock = \"*\" pytest-cov = \"*\" mypy = \"*\" sqlalchemy-stubs = \">=0.3\" safety = \"*\" black = { version = \">=19.10b\" , allow-prereleases = true } taskipy = \"*\" isort = \"*\" typer = \"^0.2.1\" alembic = \"^1.3.2\" [tool.poetry.scripts] example = \"cli:cli\" # For running management CLI in cli.py [tool.taskipy.tasks] migrate = \"alembic revision --autogenerate -m \" upgrade = \"alembic upgrade heads\" downgrade = \"alembic downgrade -1\" upgrade_dev = \"alembic -x env=dev upgrade heads\" downgrade_dev = \"alembic -x env=dev downgrade -1\" upgrade_live = \"alembic -x env=live upgrade heads\" downgrade_live = \"alembic -x env=live downgrade -1\" check = \"safety check && isort --recursive --apply && black . && mypy example && pytest --cov=example\" [tool.black] line-length = 120 target_version = ['py38'] exclude = ''' ( /( | \\.git | \\.venv | \\.mypy_cache )/ ) ''' [tool.isort] line_length = 120 skip = \"migrations,.serverless,.venv,node_modules\" multi_line_output = 3 include_trailing_comma = true [tool.coverage.run] omit = [\"example/__init__.py\"]","title":"Dev Dependencies"},{"location":"what_you_get/pyproject/dev_dependencies/#dev-dependencies","text":"These are all the packages that this cookiecutter will include for your project to use for development and CI. These things will not be included in your packaged Lambda function at runtime. The relevant section in pyproject.toml is highlighted below for reference. uvicorn : Used to run locally for development because running serverless offline is hard and buggy. pytest : A testing framework. mypy : Static type checking. sqlalchemy-stubs : Allows for static type checking of SQLAlchemy models. safety : Check your dependencies for vulnerabilities. black : Auto-formatter for your Python code. taskipy : Define useful shortcuts for running tasks in your Poetry environment. isort : Automatically sort your dependencies. pytest-cov : Easily collect coverage statistics while running pytest. typer : \"The FastAPI of CLIs\" for managing utilities for your app. alembic : Generates and runs database migrations for SQLAlchemy models. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 [tool.poetry] name = \"example\" version = \"0.1.0\" description = \"A Fast API\" authors = [] # You can put your name/email here if you like readme = \"README.md\" packages = [ { include = \"example\" }, ] classifiers = [ \"Private :: Not For Publishing!\" # Prevents this from being accidentally published to public PyPI ] include = [\"example/CHANGELOG.md\", \"example/rds-ca-2019-root.pem\"] [[tool.poetry.source]] name = \"private\" url = \"https://pypi.fury.io/my-org/\" [tool.poetry.dependencies] python = \"==3.*,>=3.8.0\" fastapi = \">=0.53.0\" mangum = \"^0.8.0\" sqlalchemy = \"^1.3.10\" pymysql = \"^0.9.3\" secure = \"^0.2.1\" flex-config = { version = \"^1.1.0\" , extras = [ \"all\" ]} semantic-version = \"^2.8.4\" markdown = \"^3.1.1\" [tool.poetry.dev-dependencies] uvicorn = \"^0.11.3\" pytest = \"*\" pytest-mock = \"*\" pytest-cov = \"*\" mypy = \"*\" sqlalchemy-stubs = \">=0.3\" safety = \"*\" black = { version = \">=19.10b\" , allow-prereleases = true } taskipy = \"*\" isort = \"*\" typer = \"^0.2.1\" alembic = \"^1.3.2\" [tool.poetry.scripts] example = \"cli:cli\" # For running management CLI in cli.py [tool.taskipy.tasks] migrate = \"alembic revision --autogenerate -m \" upgrade = \"alembic upgrade heads\" downgrade = \"alembic downgrade -1\" upgrade_dev = \"alembic -x env=dev upgrade heads\" downgrade_dev = \"alembic -x env=dev downgrade -1\" upgrade_live = \"alembic -x env=live upgrade heads\" downgrade_live = \"alembic -x env=live downgrade -1\" check = \"safety check && isort --recursive --apply && black . && mypy example && pytest --cov=example\" [tool.black] line-length = 120 target_version = ['py38'] exclude = ''' ( /( | \\.git | \\.venv | \\.mypy_cache )/ ) ''' [tool.isort] line_length = 120 skip = \"migrations,.serverless,.venv,node_modules\" multi_line_output = 3 include_trailing_comma = true [tool.coverage.run] omit = [\"example/__init__.py\"]","title":"Dev Dependencies"},{"location":"what_you_get/pyproject/isort/","text":"isort \u00b6 Configuration for isort is in the [tool.isort] section highlighted below. Values provided are to play nicely with black and not break any Serverless code. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 [tool.poetry] name = \"example\" version = \"0.1.0\" description = \"A Fast API\" authors = [] # You can put your name/email here if you like readme = \"README.md\" packages = [ { include = \"example\" }, ] classifiers = [ \"Private :: Not For Publishing!\" # Prevents this from being accidentally published to public PyPI ] include = [\"example/CHANGELOG.md\", \"example/rds-ca-2019-root.pem\"] [[tool.poetry.source]] name = \"private\" url = \"https://pypi.fury.io/my-org/\" [tool.poetry.dependencies] python = \"==3.*,>=3.8.0\" fastapi = \">=0.53.0\" mangum = \"^0.8.0\" sqlalchemy = \"^1.3.10\" pymysql = \"^0.9.3\" secure = \"^0.2.1\" flex-config = { version = \"^1.1.0\" , extras = [ \"all\" ]} semantic-version = \"^2.8.4\" markdown = \"^3.1.1\" [tool.poetry.dev-dependencies] uvicorn = \"^0.11.3\" pytest = \"*\" pytest-mock = \"*\" pytest-cov = \"*\" mypy = \"*\" sqlalchemy-stubs = \">=0.3\" safety = \"*\" black = { version = \">=19.10b\" , allow-prereleases = true } taskipy = \"*\" isort = \"*\" typer = \"^0.2.1\" alembic = \"^1.3.2\" [tool.poetry.scripts] example = \"cli:cli\" # For running management CLI in cli.py [tool.taskipy.tasks] migrate = \"alembic revision --autogenerate -m \" upgrade = \"alembic upgrade heads\" downgrade = \"alembic downgrade -1\" upgrade_dev = \"alembic -x env=dev upgrade heads\" downgrade_dev = \"alembic -x env=dev downgrade -1\" upgrade_live = \"alembic -x env=live upgrade heads\" downgrade_live = \"alembic -x env=live downgrade -1\" check = \"safety check && isort --recursive --apply && black . && mypy example && pytest --cov=example\" [tool.black] line-length = 120 target_version = ['py38'] exclude = ''' ( /( | \\.git | \\.venv | \\.mypy_cache )/ ) ''' [tool.isort] line_length = 120 skip = \"migrations,.serverless,.venv,node_modules\" multi_line_output = 3 include_trailing_comma = true [tool.coverage.run] omit = [\"example/__init__.py\"]","title":"isort"},{"location":"what_you_get/pyproject/isort/#isort","text":"Configuration for isort is in the [tool.isort] section highlighted below. Values provided are to play nicely with black and not break any Serverless code. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 [tool.poetry] name = \"example\" version = \"0.1.0\" description = \"A Fast API\" authors = [] # You can put your name/email here if you like readme = \"README.md\" packages = [ { include = \"example\" }, ] classifiers = [ \"Private :: Not For Publishing!\" # Prevents this from being accidentally published to public PyPI ] include = [\"example/CHANGELOG.md\", \"example/rds-ca-2019-root.pem\"] [[tool.poetry.source]] name = \"private\" url = \"https://pypi.fury.io/my-org/\" [tool.poetry.dependencies] python = \"==3.*,>=3.8.0\" fastapi = \">=0.53.0\" mangum = \"^0.8.0\" sqlalchemy = \"^1.3.10\" pymysql = \"^0.9.3\" secure = \"^0.2.1\" flex-config = { version = \"^1.1.0\" , extras = [ \"all\" ]} semantic-version = \"^2.8.4\" markdown = \"^3.1.1\" [tool.poetry.dev-dependencies] uvicorn = \"^0.11.3\" pytest = \"*\" pytest-mock = \"*\" pytest-cov = \"*\" mypy = \"*\" sqlalchemy-stubs = \">=0.3\" safety = \"*\" black = { version = \">=19.10b\" , allow-prereleases = true } taskipy = \"*\" isort = \"*\" typer = \"^0.2.1\" alembic = \"^1.3.2\" [tool.poetry.scripts] example = \"cli:cli\" # For running management CLI in cli.py [tool.taskipy.tasks] migrate = \"alembic revision --autogenerate -m \" upgrade = \"alembic upgrade heads\" downgrade = \"alembic downgrade -1\" upgrade_dev = \"alembic -x env=dev upgrade heads\" downgrade_dev = \"alembic -x env=dev downgrade -1\" upgrade_live = \"alembic -x env=live upgrade heads\" downgrade_live = \"alembic -x env=live downgrade -1\" check = \"safety check && isort --recursive --apply && black . && mypy example && pytest --cov=example\" [tool.black] line-length = 120 target_version = ['py38'] exclude = ''' ( /( | \\.git | \\.venv | \\.mypy_cache )/ ) ''' [tool.isort] line_length = 120 skip = \"migrations,.serverless,.venv,node_modules\" multi_line_output = 3 include_trailing_comma = true [tool.coverage.run] omit = [\"example/__init__.py\"]","title":"isort"},{"location":"what_you_get/pyproject/private_pypi/","text":"Private PyPI Repo \u00b6 The section of pyproject.toml that starts with [[tool.poetry.source]] (highlighted below) is where you can set up a private PyPI repository to install Python packages from. Everything in this project supports using private repositories registered somewhere like Gemfury . If you don't need this feature, delete that section from pyproject.toml . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 [tool.poetry] name = \"example\" version = \"0.1.0\" description = \"A Fast API\" authors = [] # You can put your name/email here if you like readme = \"README.md\" packages = [ { include = \"example\" }, ] classifiers = [ \"Private :: Not For Publishing!\" # Prevents this from being accidentally published to public PyPI ] include = [\"example/CHANGELOG.md\", \"example/rds-ca-2019-root.pem\"] [[tool.poetry.source]] name = \"private\" url = \"https://pypi.fury.io/my-org/\" [tool.poetry.dependencies] python = \"==3.*,>=3.8.0\" fastapi = \">=0.53.0\" mangum = \"^0.8.0\" sqlalchemy = \"^1.3.10\" pymysql = \"^0.9.3\" secure = \"^0.2.1\" flex-config = { version = \"^1.1.0\" , extras = [ \"all\" ]} semantic-version = \"^2.8.4\" markdown = \"^3.1.1\" [tool.poetry.dev-dependencies] uvicorn = \"^0.11.3\" pytest = \"*\" pytest-mock = \"*\" pytest-cov = \"*\" mypy = \"*\" sqlalchemy-stubs = \">=0.3\" safety = \"*\" black = { version = \">=19.10b\" , allow-prereleases = true } taskipy = \"*\" isort = \"*\" typer = \"^0.2.1\" alembic = \"^1.3.2\" [tool.poetry.scripts] example = \"cli:cli\" # For running management CLI in cli.py [tool.taskipy.tasks] migrate = \"alembic revision --autogenerate -m \" upgrade = \"alembic upgrade heads\" downgrade = \"alembic downgrade -1\" upgrade_dev = \"alembic -x env=dev upgrade heads\" downgrade_dev = \"alembic -x env=dev downgrade -1\" upgrade_live = \"alembic -x env=live upgrade heads\" downgrade_live = \"alembic -x env=live downgrade -1\" check = \"safety check && isort --recursive --apply && black . && mypy example && pytest --cov=example\" [tool.black] line-length = 120 target_version = ['py38'] exclude = ''' ( /( | \\.git | \\.venv | \\.mypy_cache )/ ) ''' [tool.isort] line_length = 120 skip = \"migrations,.serverless,.venv,node_modules\" multi_line_output = 3 include_trailing_comma = true [tool.coverage.run] omit = [\"example/__init__.py\"]","title":"Private PyPI"},{"location":"what_you_get/pyproject/private_pypi/#private-pypi-repo","text":"The section of pyproject.toml that starts with [[tool.poetry.source]] (highlighted below) is where you can set up a private PyPI repository to install Python packages from. Everything in this project supports using private repositories registered somewhere like Gemfury . If you don't need this feature, delete that section from pyproject.toml . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 [tool.poetry] name = \"example\" version = \"0.1.0\" description = \"A Fast API\" authors = [] # You can put your name/email here if you like readme = \"README.md\" packages = [ { include = \"example\" }, ] classifiers = [ \"Private :: Not For Publishing!\" # Prevents this from being accidentally published to public PyPI ] include = [\"example/CHANGELOG.md\", \"example/rds-ca-2019-root.pem\"] [[tool.poetry.source]] name = \"private\" url = \"https://pypi.fury.io/my-org/\" [tool.poetry.dependencies] python = \"==3.*,>=3.8.0\" fastapi = \">=0.53.0\" mangum = \"^0.8.0\" sqlalchemy = \"^1.3.10\" pymysql = \"^0.9.3\" secure = \"^0.2.1\" flex-config = { version = \"^1.1.0\" , extras = [ \"all\" ]} semantic-version = \"^2.8.4\" markdown = \"^3.1.1\" [tool.poetry.dev-dependencies] uvicorn = \"^0.11.3\" pytest = \"*\" pytest-mock = \"*\" pytest-cov = \"*\" mypy = \"*\" sqlalchemy-stubs = \">=0.3\" safety = \"*\" black = { version = \">=19.10b\" , allow-prereleases = true } taskipy = \"*\" isort = \"*\" typer = \"^0.2.1\" alembic = \"^1.3.2\" [tool.poetry.scripts] example = \"cli:cli\" # For running management CLI in cli.py [tool.taskipy.tasks] migrate = \"alembic revision --autogenerate -m \" upgrade = \"alembic upgrade heads\" downgrade = \"alembic downgrade -1\" upgrade_dev = \"alembic -x env=dev upgrade heads\" downgrade_dev = \"alembic -x env=dev downgrade -1\" upgrade_live = \"alembic -x env=live upgrade heads\" downgrade_live = \"alembic -x env=live downgrade -1\" check = \"safety check && isort --recursive --apply && black . && mypy example && pytest --cov=example\" [tool.black] line-length = 120 target_version = ['py38'] exclude = ''' ( /( | \\.git | \\.venv | \\.mypy_cache )/ ) ''' [tool.isort] line_length = 120 skip = \"migrations,.serverless,.venv,node_modules\" multi_line_output = 3 include_trailing_comma = true [tool.coverage.run] omit = [\"example/__init__.py\"]","title":"Private PyPI Repo"},{"location":"what_you_get/pyproject/taskipy/","text":"Tasks \u00b6 The [tool.taskipy.tasks] section (highlighted below) uses taskipy to define shortcuts to commands that will run in your Poetry environment. When in a poetry shell , these commands can be run like task <command_name> . The commands included in this cookiecutter are: migrate : Uses alembic to generate a new migration like task migrate a_description_here . upgrade : Runs any missing migrations on your local database. downgrade : Undoes the last migration run on your local database. upgrade_dev : Just like upgrade but sets the value of \"env\" in config to \"dev\" so that your database URL for your \"dev\" environment can be loaded from AWS SSM . downgrade_dev : Just like downgrade but sets the value of \"env\" in config to \"dev\" so that your database URL for your \"dev\" environment can be loaded from AWS SSM . upgrade_live : Just like upgrade but sets the value of \"env\" in config to \"live\" so that your database URL for your \"live\" environment can be loaded from AWS SSM . downgrade_live : Just like downgrade but sets the value of \"env\" in config to \"live\" so that your database URL for your \"live\" environment can be loaded from AWS SSM . check : Runs the same checks that CI will run, but applies fixes where it can (formatting). Run before each commit to save yourself a bit of pain. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 [tool.poetry] name = \"example\" version = \"0.1.0\" description = \"A Fast API\" authors = [] # You can put your name/email here if you like readme = \"README.md\" packages = [ { include = \"example\" }, ] classifiers = [ \"Private :: Not For Publishing!\" # Prevents this from being accidentally published to public PyPI ] include = [\"example/CHANGELOG.md\", \"example/rds-ca-2019-root.pem\"] [[tool.poetry.source]] name = \"private\" url = \"https://pypi.fury.io/my-org/\" [tool.poetry.dependencies] python = \"==3.*,>=3.8.0\" fastapi = \">=0.53.0\" mangum = \"^0.8.0\" sqlalchemy = \"^1.3.10\" pymysql = \"^0.9.3\" secure = \"^0.2.1\" flex-config = { version = \"^1.1.0\" , extras = [ \"all\" ]} semantic-version = \"^2.8.4\" markdown = \"^3.1.1\" [tool.poetry.dev-dependencies] uvicorn = \"^0.11.3\" pytest = \"*\" pytest-mock = \"*\" pytest-cov = \"*\" mypy = \"*\" sqlalchemy-stubs = \">=0.3\" safety = \"*\" black = { version = \">=19.10b\" , allow-prereleases = true } taskipy = \"*\" isort = \"*\" typer = \"^0.2.1\" alembic = \"^1.3.2\" [tool.poetry.scripts] example = \"cli:cli\" # For running management CLI in cli.py [tool.taskipy.tasks] migrate = \"alembic revision --autogenerate -m \" upgrade = \"alembic upgrade heads\" downgrade = \"alembic downgrade -1\" upgrade_dev = \"alembic -x env=dev upgrade heads\" downgrade_dev = \"alembic -x env=dev downgrade -1\" upgrade_live = \"alembic -x env=live upgrade heads\" downgrade_live = \"alembic -x env=live downgrade -1\" check = \"safety check && isort --recursive --apply && black . && mypy example && pytest --cov=example\" [tool.black] line-length = 120 target_version = ['py38'] exclude = ''' ( /( | \\.git | \\.venv | \\.mypy_cache )/ ) ''' [tool.isort] line_length = 120 skip = \"migrations,.serverless,.venv,node_modules\" multi_line_output = 3 include_trailing_comma = true [tool.coverage.run] omit = [\"example/__init__.py\"]","title":"Tasks"},{"location":"what_you_get/pyproject/taskipy/#tasks","text":"The [tool.taskipy.tasks] section (highlighted below) uses taskipy to define shortcuts to commands that will run in your Poetry environment. When in a poetry shell , these commands can be run like task <command_name> . The commands included in this cookiecutter are: migrate : Uses alembic to generate a new migration like task migrate a_description_here . upgrade : Runs any missing migrations on your local database. downgrade : Undoes the last migration run on your local database. upgrade_dev : Just like upgrade but sets the value of \"env\" in config to \"dev\" so that your database URL for your \"dev\" environment can be loaded from AWS SSM . downgrade_dev : Just like downgrade but sets the value of \"env\" in config to \"dev\" so that your database URL for your \"dev\" environment can be loaded from AWS SSM . upgrade_live : Just like upgrade but sets the value of \"env\" in config to \"live\" so that your database URL for your \"live\" environment can be loaded from AWS SSM . downgrade_live : Just like downgrade but sets the value of \"env\" in config to \"live\" so that your database URL for your \"live\" environment can be loaded from AWS SSM . check : Runs the same checks that CI will run, but applies fixes where it can (formatting). Run before each commit to save yourself a bit of pain. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 [tool.poetry] name = \"example\" version = \"0.1.0\" description = \"A Fast API\" authors = [] # You can put your name/email here if you like readme = \"README.md\" packages = [ { include = \"example\" }, ] classifiers = [ \"Private :: Not For Publishing!\" # Prevents this from being accidentally published to public PyPI ] include = [\"example/CHANGELOG.md\", \"example/rds-ca-2019-root.pem\"] [[tool.poetry.source]] name = \"private\" url = \"https://pypi.fury.io/my-org/\" [tool.poetry.dependencies] python = \"==3.*,>=3.8.0\" fastapi = \">=0.53.0\" mangum = \"^0.8.0\" sqlalchemy = \"^1.3.10\" pymysql = \"^0.9.3\" secure = \"^0.2.1\" flex-config = { version = \"^1.1.0\" , extras = [ \"all\" ]} semantic-version = \"^2.8.4\" markdown = \"^3.1.1\" [tool.poetry.dev-dependencies] uvicorn = \"^0.11.3\" pytest = \"*\" pytest-mock = \"*\" pytest-cov = \"*\" mypy = \"*\" sqlalchemy-stubs = \">=0.3\" safety = \"*\" black = { version = \">=19.10b\" , allow-prereleases = true } taskipy = \"*\" isort = \"*\" typer = \"^0.2.1\" alembic = \"^1.3.2\" [tool.poetry.scripts] example = \"cli:cli\" # For running management CLI in cli.py [tool.taskipy.tasks] migrate = \"alembic revision --autogenerate -m \" upgrade = \"alembic upgrade heads\" downgrade = \"alembic downgrade -1\" upgrade_dev = \"alembic -x env=dev upgrade heads\" downgrade_dev = \"alembic -x env=dev downgrade -1\" upgrade_live = \"alembic -x env=live upgrade heads\" downgrade_live = \"alembic -x env=live downgrade -1\" check = \"safety check && isort --recursive --apply && black . && mypy example && pytest --cov=example\" [tool.black] line-length = 120 target_version = ['py38'] exclude = ''' ( /( | \\.git | \\.venv | \\.mypy_cache )/ ) ''' [tool.isort] line_length = 120 skip = \"migrations,.serverless,.venv,node_modules\" multi_line_output = 3 include_trailing_comma = true [tool.coverage.run] omit = [\"example/__init__.py\"]","title":"Tasks"}]}